name: CI/CD Pipeline to EC2 with Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        # Build the Docker image with the latest code
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}:latest .

    - name: Log in to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

    - name: Push Docker image to Docker Hub
      run: |
        # Push the Docker image to Docker Hub
        docker push ${{ secrets.DOCKER_REPOSITORY }}:latest

    - name: Configure SSH Key
      run: |
        echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "Deploying application to EC2 instance at $EC2_HOST"
        
        # Pass the environment variables directly in the SSH command
        ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<EOF
          # Export the Docker environment variables
          export DOCKER_REPOSITORY="$DOCKER_REPOSITORY"
          export DOCKER_USERNAME="$DOCKER_USERNAME"
          export DOCKER_PASSWORD="$DOCKER_PASSWORD"

          # Log in to Docker Hub on the EC2 instance
          echo "$DOCKER_PASSWORD" | sudo docker login -u "$DOCKER_USERNAME" --password-stdin

          # Check if DOCKER_REPOSITORY is set to avoid invalid reference errors
          if [ -z "$DOCKER_REPOSITORY" ]; then
            echo "Error: DOCKER_REPOSITORY is not set. Exiting."
            exit 1
          fi

          # Pull the latest Docker image from Docker Hub
          sudo docker pull "$DOCKER_REPOSITORY:latest"

          # Stop and remove any existing container named 'fitness-app' if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq '^fitness-app$'; then
            sudo docker stop fitness-app
            sudo docker rm fitness-app
          fi

          # Run the new Docker container
          sudo docker run -d --name fitness-app -p 80:5000 "$DOCKER_REPOSITORY:latest"
        EOF
