name: CI/CD Pipeline to EC2 with Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        if [ -d "tests" ]; then
          pytest
        else
          echo "No tests directory found."
        fi

    - name: Configure SSH Key
      run: |
        echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "Deploying application to EC2 instance at $EC2_HOST"
        ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<EOF
          # Log in to Docker Hub on the EC2 instance
          echo "$DOCKER_PASSWORD" | sudo docker login -u "$DOCKER_USERNAME" --password-stdin

          # Pull the Docker image from Docker Hub
          sudo docker pull "$DOCKER_REPOSITORY:latest"

          # Stop and remove any existing container named 'fitness-app' if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq '^fitness-app$'; then
            sudo docker stop fitness-app
            sudo docker rm fitness-app
          fi

          # Run the Docker container with the pulled image
          sudo docker run -d --name fitness-app -p 80:5000 "$DOCKER_REPOSITORY:latest"
EOF
